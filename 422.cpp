#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<iterator>
#include<map>
#include<set>
#include<string>
#include<cstring>
#include<cstdio>
#include<stack>
#include<queue>
#include<math.h>
#include <utility>
#include <sstream> 
#include<bitset>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

typedef long long ll;
typedef std::vector<ll> vi;

#define PI acos(-1)
#define E 2.718281828459

std::bitset<10000020> bs; // 10^7 + small extra bits should be enough for most prime-related problems
std::vector<ll> primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0 .. upperbound]
          int sieve_size = upperbound + 1; // add 1 to include upperbound
           bs.reset(); bs.flip(); // set all numbers to 1
            bs.set(0, false); bs.set(1, false); // except index 0 and 1
          for (ll i = 2; i <= sieve_size; i++) if (bs.test((size_t)i)) {
// cross out multiples of i starting from i * i! 
          for (ll j = i * i; j <= sieve_size; j += i) bs.set((size_t)j, false);
           primes.push_back((int)i);
    }
} 
vi primeFactors(ll N) {
      vi factors;          // vi "primes" (generated by sieve) is optional
      ll PF_idx = 0, PF = primes[PF_idx]; // using PF = 2, 3, 4, ..., is also ok.
      while ((PF * PF <= N)) { // stop at sqrt(N), but N can get smaller
        while (N % PF == 0) { 
		N /= PF; factors.push_back(PF); } // remove this PF
            PF = primes[++PF_idx]; // only consider primes!
            }
          if (N != 1) factors.push_back(N); // special case if N is actually a prime
      return factors;
}
int gcd(int a, int b)
{ 
       return (b == 0 ? a : gcd(b, a % b)); 
}
/*bool is_prime(ll n)
{
	if(n==0||n==1)return false;
	if(n==2)return true;
	if(n%2==0)return false;
	for(int i=3;i<=sqrt(n);i+=2)
	{
		if(n%i==0)return false;
	}
	return true;
}*/
int main(int argc, char** argv) {
	freopen("c.txt","w",stdout);
	int n;
	scanf("%d",&n);
	char a[n+1][n+1];
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			cin>>a[i][j];
		}
	}
	string str;
	while(cin>>str)
	{
		if(str=="0")break;
		bool c=false;
		int x1=-1,x2=-1,y1=-1,y2=-1;
		for(int j=1;j<=n;j++)
		{
			for(int k=1;k<=n;k++)
			{
					if(str[0]==a[j][k])
					{
						if(n-k+1>=str.length())
						{
							//left to right
							bool d=true;
							int ii=1,jj=-1;
							x1=j;y1=k;
							x2=j;y2=k;
							int count=0;
							for(ii=1,jj=k+1;ii<str.length();ii++,jj++)
							{
								count++;
								if(str[ii]!=a[j][jj])
								{
									d=false;
									break;
								}
							}
							x2=j;
							y2=jj;
							if(jj!=-1)
							y2--;
							if(d&&ii==str.length())c=true;
						}
						if(!c&&k>=str.length())
					    {
						    //right to left
						    bool d=true;
						    x1=j;y1=k;x2=j;y2=k;
						    int ii,jj=-1;
							for(ii=1,jj=k-1;ii<str.length();ii++,jj--)
							{
								if(str[ii]!=a[j][jj])
								{
									d=false;
									break;
								}
							}
							if(jj!=-1){
								y2=jj+1;
							}
							if(d&&ii==str.length())c=true;
					    }
					    if(!c&&n-j+1>=str.length())
					    {
						    //top to bottom
						    bool d=true;
						    x1=j;y1=k;
						    x2=j;y2=k;
						    int ii,_i=-1;
							for(ii=1,_i=j+1;ii<str.length();ii++,_i++)
							{
								if(str[ii]!=a[_i][k])
								{
									d=false;
									break;
								}
							}
							if(_i!=-1)
							{
								x2=_i;
								x2--;
							}
							if(d&&ii==str.length())c=true;
				    	}
					    if(!c&&k>=str.length())
					    {
						    //upper left diagonal
						    x1=j;
						    y1=k;x2=j;y2=k;
						    bool d=true;
						    int ii,_i=-1,_j=-1;
							for(ii=1,_i=j-1,_j=k-1;ii<str.length()&&_i>0&&_j>0;ii++,_i--,_j--)
							{
								if(str[ii]!=a[_i][_j])
								{
									d=false;
									break;
								}
							}
							if(_i!=-1)
							{
								x2=_i+1;
								y2=_j+1;
							}
							if(d&&ii==str.length())c=true;
					    }
					    if(!c&&k>=str.length())
					    {
						    //lower left diagonal
						    bool d=true;
						    x1=j;y1=k;
						    x2=j;y2=k;
						    int ii,_i=-1,_j=-1;
							for(ii=1,_i=j+1,_j=k-1;ii<str.length()&&_i<=n&&_j>0;ii++,_i++,_j--)
							{
								if(str[ii]!=a[_i][_j])
								{
									d=false;break;
								}
							}
							if(_i!=-1)
							{
								x2=_i-1;
								y2=_j+1;
							}
							if(d&&ii==str.length())c=true;
					    }
					    
					    if(!c&&n-k+1>=str.length())
					    {
							//upper diagonal LEFT TO RIGHT
							bool d=true;
							x1=j;y1=k;x2=j;y2=k;
							int ii,_i=-1,_j=-1;
							for(ii=1,_i=j+1,_j=k+1;ii<str.length()&&_i<=n&&_j<=n;ii++,_i++,_j++)
							{
								if(str[ii]!=a[_i][_j])
								{
									d=false;break;
								}
							}
							if(_i!=-1)
							{
								x2=_i-1;
								y2=_j-1;
							}
							if(d&&ii==str.length())c=true;
					    }
					    if(!c&&n-k+1>=str.length())
					    {
							//upper diagonal RIGHT
							bool d=true;
							x1=j;y1=k;x2=j;y2=k;
							int ii,_i=-1,_j=-1;
							for(ii=1,_i=j-1,_j=k+1;ii<str.length()&&_i>0&&_j<=n;ii++,_i--,_j++)
							{
								if(str[ii]!=a[_i][_j])
								{
									d=false;break;
								}
							}
							if(_i!=-1)
							{
								x2=_i+1;
								y2=_j-1;
							}
							if(d&&ii==str.length())c=true;
					    }
					}
				if(c)
				{
					//I=j;
					//J=k;
					break;
				}
			}
			if(c)
			{
				break;
			}
		}
		if(c)
		{
			printf("%d,%d %d,%d\n",x1,y1,x2,y2);
			//cout<<"found\n";
		}
		else
		{
			printf("Not found\n");
		}
	}
}
