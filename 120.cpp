#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<iterator>
#include<map>
#include<set>
#include<string>
#include<cstring>
#include<cstdio>
#include<stack>
#include<queue>
#include<math.h>
#include <utility>
#include <sstream> 
#include<bitset>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

typedef long long ll;
typedef std::vector<ll> vi;

#define PI acos(-1)
#define E 2.718281828459

std::bitset<2250> bs; // 10^7 + small extra bits should be enough for most prime-related problems
std::vector<ll> primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0 .. upperbound]
          int sieve_size = upperbound + 1; // add 1 to include upperbound
           bs.reset(); bs.flip(); // set all numbers to 1
            bs.set(0, false); bs.set(1, false); // except index 0 and 1
          for (ll i = 2; i <= sieve_size; i++) if (bs.test((size_t)i)) {
// cross out multiples of i starting from i * i! 
          for (ll j = i * i; j <= sieve_size; j += i) bs.set((size_t)j, false);
           primes.push_back((int)i);
    }
} 
vi primeFactors(ll N) {
      vi factors;          // vi "primes" (generated by sieve) is optional
      ll PF_idx = 0, PF = primes[PF_idx]; // using PF = 2, 3, 4, ..., is also ok.
      while ((PF * PF <= N)) { // stop at sqrt(N), but N can get smaller
        while (N % PF == 0) { 
		N /= PF; factors.push_back(PF); } // remove this PF
            PF = primes[++PF_idx]; // only consider primes!
            }
          if (N != 1) factors.push_back(N); // special case if N is actually a prime
      return factors;
}
int gcd(int a, int b)
{ 
       return (b == 0 ? a : gcd(b, a % b)); 
}

int main(int argc, char** argv) {
	//freopen("c.txt","w",stdout);
	string str;
	while(getline(cin,str))
	{
		vector<int> a;
		vector<int>::iterator it;
		vector<int>::iterator jt;
		int temp;
		stringstream s(str);
		priority_queue<int> big;
		while(s>>temp)
		{
			a.push_back(temp);
			big.push(temp);
		}
		for(int i=0;i<a.size();i++)
		{
			cout<<a[i];
			if(i+1!=a.size())
			cout<<" ";
		}
		cout<<endl;
		vector<int> result;
		int j=a.size()-1,I=0;
		while(!big.empty())
		{
			int x=big.top();
			big.pop();
			if(x==a[j])
			{
				//cout<<"equal\n";
				j--;
				I++;
				continue;
			}
			if(x==a[0])
			{
				//cout<<"at zero\n";
				int X=a[j];
				it=find(a.begin(),a.end(),X);
				it++;
				reverse(a.begin(),it);
				result.push_back(I+1);
			}
			else
			{
				//cout<<"not zero\n";
				int h;
				for(int k=a.size()-1;k>=0;k--)
				{
					if(a[k]==x)
					{
						h=k;
						break;
					}
				}
				it=find(a.begin(),a.end(),x);
				it++;
				reverse(a.begin(),it);
				//h++;
				h=a.size()-h;
				result.push_back(h);
				int X=a[j];
				it=find(a.begin(),a.end(),X);
				it++;
				reverse(a.begin(),it);
				result.push_back(I+1);
			}
			j--;
			I++;
			/*cout<<"after reversing  ";
			for(int i=0;i<a.size();i++)
	    	{   
			cout<<a[i];
			if(i+1!=a.size())
			cout<<" ";
		   }
		   cout<<endl;*/
		}
		for(int i=0;i<result.size();i++)
		cout<<result[i]<<" ";
		cout<<0<<endl;
	}
   return 0;
}
