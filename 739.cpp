#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<iterator>
#include<map>
#include<set>
#include<string>
#include<cstring>
#include<cstdio>
#include<stack>
#include<queue>
#include<math.h>
#include <utility>
#include <sstream> 
#include<bitset>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

typedef long long ll;
typedef std::vector<ll> vi;

#define PI acos(-1)
#define E 2.718281828459

std::bitset<10000020> bs; // 10^7 + small extra bits should be enough for most prime-related problems
std::vector<ll> primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0 .. upperbound]
          int sieve_size = upperbound + 1; // add 1 to include upperbound
           bs.reset(); bs.flip(); // set all numbers to 1
            bs.set(0, false); bs.set(1, false); // except index 0 and 1
          for (ll i = 2; i <= sieve_size; i++) if (bs.test((size_t)i)) {
// cross out multiples of i starting from i * i! 
          for (ll j = i * i; j <= sieve_size; j += i) bs.set((size_t)j, false);
           primes.push_back((int)i);
    }
} 
vi primeFactors(ll N) {
      vi factors;          // vi "primes" (generated by sieve) is optional
      ll PF_idx = 0, PF = primes[PF_idx]; // using PF = 2, 3, 4, ..., is also ok.
      while ((PF * PF <= N)) { // stop at sqrt(N), but N can get smaller
        while (N % PF == 0) { 
		N /= PF; factors.push_back(PF); } // remove this PF
            PF = primes[++PF_idx]; // only consider primes!
            }
          if (N != 1) factors.push_back(N); // special case if N is actually a prime
      return factors;
}
int gcd(int a, int b)
{ 
       return (b == 0 ? a : gcd(b, a % b)); 
}
map<char,int> mp;
map<char,int>::iterator it;
void Sieve()
{
    mp['B']=1;mp['P']=1;mp['F']=1;mp['V']=1;
    mp['C']=2;mp['S']=2;mp['K']=2;mp['G']=2;mp['J']=2;mp['Q']=2;mp['X']=2;mp['Z']=2;;
	mp['L']=4;mp['D']=3;mp['T']=3;
	mp['R']=6;mp['M']=5;mp['N']=5;
}
int main(int argc, char** argv) {
	//freopen("c.txt","w",stdout);
	Sieve();
	string str;
	vector<string> a;
	while(cin>>str)
	{
		a.push_back(str);
	}
	for(int i=0;i<a.size();i++)
	{
		if(i==0)
		{
			cout<<"         NAME                     SOUNDEX CODE\n";
		}
		vector<int> b(3);
		fill(b.begin(),b.end(),0);
		cout<<"         ";
		cout<<a[i];
		for(int I=a[i].length()+10;I<35;I++)
		{
			cout<<" ";
		}
		cout<<a[i][0];
		int index=0;
		int pre;
		for(int k=0;k<a[i].length();k++)
		{
			it=mp.find(a[i][k]);
			if(it!=mp.end())
			{
				if(k==0){
					pre=it->second;continue;
				}
				if(pre==it->second)
				{
					continue;
				}
				else
				{
					b[index++]=it->second;
					pre=it->second;
				}
			}
			else
			{
				pre=0;
			}
			if(index==3)break;
		}
		cout<<b[0]<<b[1]<<b[2]<<endl;
	}
	cout<<"                   END OF OUTPUT\n";
}
