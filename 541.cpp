#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<iterator>
#include<map>
#include<set>
#include<string>
#include<cstring>
#include<cstdio>
#include<stack>
#include<queue>
#include<math.h>
#include <utility>
#include <sstream> 
#include<bitset>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */


typedef long long ll;
typedef std::vector<ll> vi;

#define PI acos(-1)
#define E 2.718281828459

std::bitset<2250> bs; // 10^7 + small extra bits should be enough for most prime-related problems
std::vector<ll> primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0 .. upperbound]
          int sieve_size = upperbound + 1; // add 1 to include upperbound
           bs.reset(); bs.flip(); // set all numbers to 1
            bs.set(0, false); bs.set(1, false); // except index 0 and 1
          for (ll i = 2; i <= sieve_size; i++) if (bs.test((size_t)i)) {
// cross out multiples of i starting from i * i! 
          for (ll j = i * i; j <= sieve_size; j += i) bs.set((size_t)j, false);
           primes.push_back((int)i);
    }
} 
vi primeFactors(ll N) {
      vi factors;          // vi "primes" (generated by sieve) is optional
      ll PF_idx = 0, PF = primes[PF_idx]; // using PF = 2, 3, 4, ..., is also ok.
      while ((PF * PF <= N)) { // stop at sqrt(N), but N can get smaller
        while (N % PF == 0) { 
		N /= PF; factors.push_back(PF); } // remove this PF
            PF = primes[++PF_idx]; // only consider primes!
            }
          if (N != 1) factors.push_back(N); // special case if N is actually a prime
      return factors;
}

int gcd(int a, int b)
{ 
       return (b == 0 ? a : gcd(b, a % b)); 
}
int main(int argc, char** argv) {
	//freopen("c.txt","w",stdout);
	int n;
	while(std::cin>>n)
	{
		if(n==0)break;
		int a[n][n];
		bool coo=false;
		std::vector<int> row_sum_odd;
		std::vector<int> column_sum_odd;
		for(int i=0;i<n;i++)
		{
			int temp=0;
			for(int j=0;j<n;j++)
			{
				std::cin>>a[i][j];
				temp+=a[i][j];
			}
			if(temp%2!=0)
			{
				row_sum_odd.push_back(i);
				if(row_sum_odd.size()>1)
				{
					coo=true;
				}
			}
		}
		if(coo)
		{
			std::cout<<"Corrupt\n";
			continue;
		}
		for(int j=0;j<n;j++)
		{
			int temp=0;
			for(int i=0;i<n;i++)
			{
				temp+=a[i][j];
			}
			if(temp%2!=0)
			{
				column_sum_odd.push_back(j);
				if(column_sum_odd.size()>1)
				{
					coo=true;
				}
			}
		}
		if(coo)
		{
			std::cout<<"Corrupt\n";
			continue;
		}
		if(column_sum_odd.empty()&&row_sum_odd.empty())
		{
			std::cout<<"OK\n";
			continue;
		}
		if(column_sum_odd.empty()&&!row_sum_odd.empty())
		{
			std::cout<<"Corrupt\n";
			continue;
		}
		if(!column_sum_odd.empty()&&row_sum_odd.empty())
		{
			std::cout<<"Corrupt\n";
			continue;
		}
			printf("Change bit (%d,%d)\n",row_sum_odd[0]+1,column_sum_odd[0]+1);
	}
	return 0;
}
